from aiogram import Router, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.utils.markdown import hbold
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from app.api.db import forms_from_DB, return_data_from_DB, save_favorite_drug, \
    get_favorite_drugs
from app.api.api_requests import make_request, write_data
from app.bot.keyboards import main_menu, search_cancel, \
    create_drugs_keyboard, add_fav_drugs_keyboard, Pagination
from app.bot.utils import prettify_info


router = Router()


class DrugSearchStates(StatesGroup):
    waiting_for_drug_name = State()
    waiting_for_drug_form = State()


@router.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤—ã–Ω–µ –∫–Ω–æ–ø–∫–∏.

    –ö–æ–º–∞–Ω–¥–∞ /start
    """
    await message.answer(
        text=(
            f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {hbold(message.from_user.full_name)}!'
        ),
        reply_markup=main_menu
    )


@router.callback_query(F.data == 'search_drug')
async def callback_search_drug_handler(
    callback_query: types.CallbackQuery,
    state: FSMContext
) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ –ø–æ–∏—Å–∫–∞ - /search_drug
    """
    await state.set_state(DrugSearchStates.waiting_for_drug_name)
    await callback_query.message.answer(
        'üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ –∏–ª–∏ –µ–≥–æ —á–∞—Å—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞:',
        reply_markup=search_cancel
    )
    await callback_query.answer()


@router.callback_query(F.data.startswith('add_fav_'))
async def handle_add_to_favorite(
    callback_query: types.CallbackQuery,
) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î –ø—Ä–µ–ø–∞—Ä–∞—Ç –∏ —Ñ–æ—Ä–º—É –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    """
    try:
        drug_id = int(callback_query.data.split('_')[2])

        user_id = callback_query.from_user.id

        result = await save_favorite_drug(user_id, drug_id)

        if result:
            await callback_query.answer("–ü—Ä–µ–ø–∞—Ä–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ‚úÖ")
    except Exception as e:
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ ‚ùå")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {e}")


@router.callback_query(F.data == 'cancel_search')
async def cancel_drug_search(
    callback_query: types.CallbackQuery,
    state: FSMContext
) -> None:
    """
    –û—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞
    """
    await state.clear()
    await callback_query.message.edit_text(
        'üîç –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω',
        reply_markup=main_menu
    )
    await callback_query.answer()


@router.message(DrugSearchStates.waiting_for_drug_name)
async def process_drug_search(
    message: Message, state: FSMContext
):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞
    """
    drug_name = message.text.strip()

    loading_message = await message.answer('üîç –ò—â—É –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã...')

    try:
        # response = await make_request(drug_name)
        # await write_data(response)
        found_drugs = await forms_from_DB(drug_name)

        await state.update_data(
            search_results=found_drugs,
            search_query=drug_name,
            current_page=0
        )
        await loading_message.delete()

        if found_drugs:
            await message.answer(
                text='–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:',
                reply_markup=await create_drugs_keyboard(found_drugs, page=0)
            )
        else:
            await message.answer(
                text=(
                    f'‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É "{drug_name}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n'
                    '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.'
                ),
                reply_markup=main_menu
            )
            await state.clear()

    except Exception as e:
        await loading_message.delete()
        await message.answer(
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
            reply_markup=main_menu
        )
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤: {e}")
        await state.clear()


@router.callback_query(Pagination.filter())
async def handle_drugs_pagination(
    callback: types.CallbackQuery,
    callback_data: Pagination,
    state: FSMContext
) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    data = await state.get_data()
    page = callback_data.page

    drugs_list = []
    message_text = ""

    if 'search_results' in data:
        drugs_list = data.get('search_results', [])
        message_text = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞"
    elif 'favorite_drugs' in data:
        drugs_list = data.get('favorite_drugs', [])
        message_text = "–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã"

    if drugs_list:
        await state.update_data(current_page=page)
        new_keyboard = await create_drugs_keyboard(drugs_list, page=page)

        try:
            await callback.message.edit_text(
                text=message_text,
                reply_markup=new_keyboard
            )
        except Exception as create_keyboard_error:
            await callback.message.edit_reply_markup(
                reply_markup=new_keyboard
            )
            print(f'–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {create_keyboard_error}')

    await callback.answer()


@router.callback_query(F.data.startswith('drug_'))
async def handle_drug_selection(
    callback_query: types.CallbackQuery,
    state: FSMContext
) -> None:
    """
    –û—Ç–≤–µ—Ç –∏–∑ –ë–î –ø–æ –Ω–∞–ª–∏—á–∏—é —Ñ–æ—Ä–º—ã.
    """
    await state.set_state(DrugSearchStates.waiting_for_drug_form)

    drug_id = int(callback_query.data.split('_')[1])
    drug_name = callback_query.data.split('_')[2]
    user_id = callback_query.from_user.id
    loading_message = await callback_query.message.answer(
            'üîç –ò—â—É –ø–æ –∞–ø—Ç–µ–∫–∞–º...'
        )

    raw_drug_info = await return_data_from_DB(drug_id)
    drug_info = await prettify_info(raw_drug_info)

    await state.update_data(
            search_results=drug_info, search_query=drug_id
        )
    await state.clear()
    await loading_message.delete()

    if drug_info:
        await callback_query.message.answer(
            text=(
                f'–ù–∞–ª–∏—á–∏–µ <b>{drug_name}</b>:\n'
                f'{drug_info}'
            ),
            parse_mode=ParseMode.HTML,
            reply_markup=await add_fav_drugs_keyboard(user_id, drug_id)
        )
    else:
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ.")


@router.callback_query(F.data == 'favorite_drugs')
async def handle_favorite_drugs(
    callback_query: types.CallbackQuery,
    state: FSMContext
) -> None:
    """
    –í—ã–≤–æ–¥–∏—Ç –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–º –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã.
    """

    try:
        user_id = callback_query.from_user.id
        fav_list = await get_favorite_drugs(user_id)
        await state.update_data(
            search_results=fav_list, search_query=user_id
        )

        if fav_list:
            new_keyboard = await create_drugs_keyboard(fav_list, page=0)
            await callback_query.message.answer(
                text="–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã",
                reply_markup=new_keyboard
            )
        else:
            await callback_query.message.answer(
                text="‚ùå –í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–∏–Ω –ø—Ä–µ–ø–∞—Ä–∞—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.",
                reply_markup=main_menu
            )
    except Exception as e:
        await callback_query.message.answer(
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
            reply_markup=main_menu
        )
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")
